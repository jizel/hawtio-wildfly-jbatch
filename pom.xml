<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <parent>
        <groupId>io.hawt</groupId>
        <artifactId>project</artifactId>
        <version>1.5-SNAPSHOT</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <artifactId>hawtio-wildfly-jbatch</artifactId>
    <packaging>war</packaging>
    <name>hawtio-wildfly-jbatch</name>
    <description>hawtio :: Wildfly Web Application with jbatch plugin</description>

    <properties>
        <guava.version>15.0</guava.version>
    
        <!--Merge-->
        <!-- filtered plugin properties, we don't define plugin-scripts here
        as we build that dynamically using maven-antrun-plugin below. -->
        <!-- plugin-context is what context this plugin will handle requests on
        in the application server -->
        <plugin-context>/jbatch-plugin</plugin-context>

        <!-- plugin-name is the name of our plugin, affects the name used for
        the plugin's mbean -->
        <plugin-name>jbatch-plugin</plugin-name>

        <!-- plugin-domain is currently unused, we just define it to an empty
        string -->
        <plugin-domain />

        <!-- this lets this plugin deploy nicely into karaf, these get used
        for the ImportPackage directive for maven-bundle-plugin -->
        <fuse.osgi.import>
            javax.servlet,
            *;resolution:=optional
        </fuse.osgi.import>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>${servlet-api-version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>io.hawt</groupId>
            <artifactId>hawtio-base</artifactId>
            <version>${project.version}</version>
            <!--
              NOTE this WAR dependency type which enables this WAR to
              inherit all the plugins and content from the core hawtio-base WAR
            -->
            <type>war</type>
            <exclusions>
                <exclusion>
                    <groupId>io.hawt</groupId>
                    <artifactId>hawtio-git</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- need a newer version of commons-logging -->
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>${commons-logging-version}</version>
        </dependency>

        <!-- lets mark dependencies from the WAR as provided to avoid jetty:run adding duplicates -->
        <dependency>
            <groupId>io.hawt</groupId>
            <artifactId>hawtio-core</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
    
        <!--Merge-->
        <dependency>
            <groupId>javax.batch</groupId>
            <artifactId>javax.batch-api</artifactId>
            <version>1.0.1</version>
            <!--<type>jar</type>-->
            <scope>provided</scope>
        </dependency>
        
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-cli</artifactId>
            <version>2.0.10.Final</version>            
            <!--                <exclusions>
                <exclusion>
                    <artifactId>jconsole</artifactId>
                    <groupId>sun.jdk</groupId>
                </exclusion>
            </exclusions>-->
            <scope>provided</scope>
        </dependency>   
        
        <!--Needs to be added because of an issue - viz poznamky-->
        <dependency>
            <groupId>org.jboss.logmanager</groupId>
            <artifactId>jboss-logmanager</artifactId>
            <version>2.0.3.Final</version>
            <scope>provided</scope>
        </dependency>

        <!--Hawt.io dependencies-->
        <!-- we only need to embed this dependency in the war, this contains
        a nice helper class that our plugin can use to export it's plugin
        mbean -->
        <dependency>
            <groupId>io.hawt</groupId>
            <artifactId>hawtio-plugin-mbean</artifactId>
            <!--            <version>${project.version}</version>            -->
            <version>1.4.64</version>            
        </dependency>
        
        <!--Hawtio Authentication filter-->
        <dependency>
            <groupId>io.hawt</groupId>
            <artifactId>hawtio-system</artifactId>
            <!--<version>1.5-SNAPSHOT</version>-->
            <version>1.4.64</version>            
        </dependency> 

        <!-- servlet API is provided by the container -->
        <!--        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>${servlet-api-version}</version>
            <version>2.5</version>
            <scope>provided</scope>
        </dependency>-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>

        
        <!--AngularJS-->
        <dependency>
            <groupId>org.webjars.bower</groupId>
            <artifactId>angular-resource</artifactId>
            <version>1.5.0</version>
        </dependency>
        
        <!--/Hawt.io dependencies-->

        <!-- logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <!--<version>${slf4j-version}</version>-->
            <version>1.7.21</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <!--<version>${slf4j-version}</version>-->
            <version>1.7.21</version>
            <scope>provided</scope>
        </dependency>        
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
            <scope>provided</scope>
        </dependency>                        
        
        <!--REST-->
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20140107</version>
            <type>jar</type>
        </dependency>

        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.ws</groupId>
            <artifactId>jbossws-api</artifactId>
            <version>1.0.3.Final</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
            <version>7.0</version>
            <type>jar</type>
            <scope>provided</scope>
        </dependency>  
        
        <!--Zbytecny?-->
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-jaxrs</artifactId>
            <version>3.0.16.Final</version>
        </dependency>
        
        <!--Tests-->
    <!--JUnit-->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
        <scope>test</scope>
    </dependency>
        
    <!-- Arquillian-->
    <dependency>
        <groupId>org.jboss.arquillian</groupId>
        <artifactId>arquillian-bom</artifactId>
        <version>1.1.11.Final</version>
        <scope>test</scope>
        <type>pom</type>
    </dependency>        
        
    <dependency>
        <groupId>org.wildfly.arquillian</groupId>
        <artifactId>wildfly-arquillian-container-embedded</artifactId>
        <version>2.0.0.Alpha1</version>
        <scope>test</scope>
    </dependency>
        
    <dependency>
        <groupId>org.jboss.arquillian.junit</groupId>
        <artifactId>arquillian-junit-container</artifactId>
        <scope>test</scope>
        <version>1.1.11.Final</version>
    </dependency>   
        
    <!--Security-->
    <dependency>
        <groupId>org.jboss.as</groupId>
        <artifactId>jboss-as-security</artifactId>
        <version>7.2.0.Final</version>
        <scope>provided</scope>
    </dependency>
    </dependencies>
    
    
        

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${war-plugin-version}</version>
                <configuration>
                    <packagingExcludes>**/lib/slf4j*.jar,**/lib/commons-logging-*.jar,**/classes/log4j.properties,**/lib/guava-*.jar,**/lib/maven-aether-provider-*.jar,**/lib/maven-model-*.jar,**/lib/maven-model-builder-*.jar,**/lib/maven-repository-metadata-*.jar,**/lib/netty-*.jar,**/lib/org.apache.aries.blueprint*.jar,**/lib/plexus-classworlds-*.jar,**/lib/plexus-component-annotations-*.jar,**/lib/plexus-interpolation-*.jar,**/lib/plexus-utils-*.jar,**/lib/wagon-ahc-*.jar,**/lib/wagon-provider-api-*.jar,**/lib/xbean-reflect-*.jar,**/lib/hawtio-git-*.jar</packagingExcludes>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    
                    <!--Merge-->
                    <outputFileNameMapping>@{artifactId}@-@{baseVersion}@@{dashClassifier?}@.@{extension}@</outputFileNameMapping>                    
                    <webResources>
                        <resource>
                            <filtering>true</filtering>
                            <directory>src/main/resources</directory>
                            <includes>
                                <include>**/*.*</include>
                            </includes>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>${basedir}/overlays</directory>
                            <includes>
                                <include>**/*.*</include>
                            </includes>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>
            
            <!--Merge-->
            
            <!--Arquillian plugin for tests-->
            <!-- You need the maven dependency plugin to download locally a zip with the server, unless you provide your own, it will download under the /target directory -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.10</version>
                <executions>
                    <execution>
                        <id>unpack</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.wildfly</groupId>
                                    <artifactId>wildfly-dist</artifactId>
                                    <version>10.0.0.Final</version>
                                    <type>zip</type>
                                    <overWrite>false</overWrite>
                                    <outputDirectory>target</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        
        
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19.1</version>
                <configuration>
                    <forkMode>always</forkMode>
                    <systemPropertyVariables>
                        <!--<arquillian.launch>wildfly-embedded</arquillian.launch>-->
                        <!--<arquillian.launch></arquillian.launch>-->
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <jboss.home>.${file.separator}target${file.separator}wildfly-10.0.0.Final</jboss.home>
                        <module.path>.${file.separator}target${file.separator}wildfly-10.0.0.Final${file.separator}modules</module.path>
                        <!--                        <jboss.home>.\target\wildfly-10.0.0.Final</jboss.home>
                        <module.path>.\target\wildfly-10.0.0.Final\modules</module.path>-->
                    
                        <!--                    <jboss.home>c:\wildfly\wildfly-10.0.0.Final</jboss.home> 
                        <property name="managementAddress">127.0.0.1</property>
                        <property name="managementPort">8080</property>                   -->
                    </systemPropertyVariables> 
                    <redirectTestOutputToFile>true</redirectTestOutputToFile>               
                </configuration>
            </plugin>
            
            <!-- Hawtio - We use maven-antrun-plugin to build up a list of
            javascript files for our plugin mbean, this means
            it needs to run before the maven-resources-plugin
            copies and filters the web.xml, since for this
            example we use contextParam settings to configure
            our plugin mbean -->

            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <!--<version>${maven-antrun-plugin-version}</version>-->
                <version>1.8</version>
                
                <executions>

                    <execution>
                        <!--                         we run this early in the build process before
                        maven-resources-plugin is run.  We're exporting the
                        plugin-scripts property from here, so we need to
                        use maven-antrun-plugin 1.6 or up -->
                        <id>generate-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <echo>Building plugin javascript file list</echo>
                                javascript-files will contain all of the javascript in
                                our project 
                                <fileset id="javascript-files" dir="${basedir}/src/main/webapp">
                                    <include name="**/*.js" />
                                </fileset>
                                we need to strip out the top level path which is
                                our source directory and be sure to change the directory
                                separators to forward slashes 
                                <pathconvert pathsep="," dirsep="/" property="plugin-scripts" refid="javascript-files">
                                    <map from="${basedir}/src/main/webapp/" to="" />
                                </pathconvert>
                                <echo>Files: ${plugin-scripts}</echo>

                                                                
                                <echo>Copying log4j.properties</echo>
                                <copy file="src/main/resources/log4j.properties" todir="target/classes" />

                            </target>
<!--                            this exports plugin-scripts to the maven build, without
                            this line ${plugin-scripts} in the web.xml file won't be
                            replaced -->
                            <exportAntProperties>true</exportAntProperties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <!--<version>${maven-resources-plugin-version}</version>-->
                <!--<version>2.7</version>-->
                <version>2.7</version>
                <executions>
                    <execution>
                        <!--                         defining this maven plugin in the same phase as the
                        maven-antrun-plugin but *after* we've configured the
                        maven-antrun-plugin ensures we filter resources *after*
                        we've discovered the plugin .js files. -->
                        <id>copy-resources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>resources</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
